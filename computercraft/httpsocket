local function handle(server,path,data)
  datastr = "?"
  for var,val in pairs(data) do
    datastr = datastr..textutils.urlEncode(var).."="..textutils.urlEncode(val).."&"
  end
  datastr = datastr:sub(1,#datastr-1)
  req = http.get(server..path..datastr)
  if not req then
    return {success=false}
  end
  res = textutils.unserialize(req.readAll())
  req.close()
  if not res then
    return {success=false}
  end
  return res
end



function connect(server,name)
  ok, err = http.checkURL(server)
  if not ok then
    error(err, 2)
  end
  res = handle(server,"api",{})
  if not res.success then
    return false
  end
  res = handle(server,"api/connect",{name=name})
  if not res.success then
    return false
  end
  sock = {
    server = server,
    name = res.data.name,
    id = res.data.id,
  }
  setmetatable(sock,{
    __index = {
      lookup = function()
        res = handle(sock.server,"api",{get="socket",name=sock.name,id=sock.id})
        return res.success, res.data
      end,
      ping = function()
        res = handle(sock.server,"api/ping",{name=sock.name,id=sock.id})
        return res.success
      end,
      send = function(to,message)
        if type(to) ~= "string" or type(message) ~= "string" then
          error("Expected string, string",2)
        end
        res = handle(sock.server,"api/send",{name=sock.name,id=sock.id,to=to,message=message})
        return res.success, res.data
      end,
      broadcast = function(message)
        if type(message) ~= "string" then
          error("Expected string",2)
        end
        res = handle(sock.server,"api",{get="socket"})
        if not res.success then
          return res.success
        end
        messages = {}
        for i,v in pairs(res.data) do
          res = handle(sock.server,"api/send",{name=sock.name,id=sock.id,to=v.name,message=message})
          if not res.success then
            return false
          end
          table.insert(messages,res.data)
        end
        return true, messages
      end,
      receive = function()
        res = handle(sock.server,"api/receive",{name=sock.name,id=sock.id})
        return res.success, res.data
      end,
      close = function()
        res = handle(sock.server,"api/disconnect",{name=sock.name,id=sock.id})
        return res.success
      end,
    },
  })
  return sock
end

function time(server)
  if type(server) ~= "string" then
    error("Expected string",2)
  end
  res = handle(server,"api",{get="time"})
  return res.success, res.data
end

function lookup(server,name)
  if type(server) ~= "string" then
    error("Expected string",2)
  elseif name and type(name) ~= "string" then
    error("Expected string, string",2)
  end
  res = handle(server,"api",{get="socket",name=name})
  return res.success, res.data
end
