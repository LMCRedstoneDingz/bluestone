local function a(b,c,d)datastr="?"for e,f in pairs(d)do datastr=datastr..textutils.urlEncode(e).."="..textutils.urlEncode(f).."&"end;datastr=datastr:sub(1,#datastr-1)req=http.get(b..c..datastr)if not req then return{success=false}end;res=textutils.unserialize(req.readAll())req.close()if not res then return{success=false}end;return res end;function connect(b,g)ok,err=http.checkURL(b)if not ok then error(err,2)end;res=a(b,"api",{})if not res.success then return false end;res=a(b,"api/connect",{name=g})if not res.success then return false end;sock={server=b,name=res.data.name,id=res.data.id}setmetatable(sock,{__index={lookup=function()res=a(sock.server,"api",{get="socket",name=sock.name,id=sock.id})return res.success,res.data end,ping=function()res=a(sock.server,"api/ping",{name=sock.name,id=sock.id})return res.success end,send=function(h,i)if type(h)~="string"or type(i)~="string"then error("Expected string, string",2)end;res=a(sock.server,"api/send",{name=sock.name,id=sock.id,to=h,message=i})return res.success,res.data end,broadcast=function(i)if type(i)~="string"then error("Expected string",2)end;res=a(sock.server,"api",{get="socket"})if not res.success then return res.success end;messages={}for j,k in pairs(res.data)do res=a(sock.server,"api/send",{name=sock.name,id=sock.id,to=k.name,message=i})if not res.success then return false end;table.insert(messages,res.data)end;return true,messages end,receive=function()res=a(sock.server,"api/receive",{name=sock.name,id=sock.id})return res.success,res.data end,close=function()res=a(sock.server,"api/disconnect",{name=sock.name,id=sock.id})return res.success end}})return sock end;function time(b)if type(b)~="string"then error("Expected string",2)end;res=a(b,"api",{get="time"})return res.success,res.data end;function lookup(b,g)if type(b)~="string"then error("Expected string",2)elseif g and type(g)~="string"then error("Expected string, string",2)end;res=a(b,"api",{get="socket",name=g})return res.success,res.data end
