local function lpad(str,pad,len)
  return pad:rep(len-#str)..str
end

local function toHex(message)
  local hexmessage = ""
  for i=1,#message,1 do
    hexmessage = hexmessage..lpad(string.format("%x",string.byte(message:sub(i,i))),"0",2)
  end
  return hexmessage
end

local function fromHex(hexmessage)
  local message = ""
  for i=1,#hexmessage,2 do
    message = message..string.char(tonumber(hexmessage:sub(i,i+1),16))
  end
  return message
end

local function handle(server,path,data)
  local datastr = "?"
  for var,val in pairs(data) do
    datastr = datastr..textutils.urlEncode(var).."="..textutils.urlEncode(val).."&"
  end
  local datastr = datastr:sub(1,#datastr-1)
  local req = http.get(server..path..datastr)
  if not req then
    return {success=false}
  end
  local res = textutils.unserialize(req.readAll())
  req.close()
  if not res then
    return {success=false}
  end
  return res
end



function connect(server,name)
  local ok, err = http.checkURL(server)
  local res
  if not ok then
    error(err, 2)
  end
  res = handle(server,"api",{})
  if not res.success then
    return false
  end
  res = handle(server,"api/connect",{name=name})
  if not res.success then
    return false
  end
  sock = {
    server = server,
    name = res.data.name,
    id = res.data.id,
  }
  setmetatable(sock,{
    __index = {
      lookup = function()
        local res = handle(sock.server,"api",{get="socket",name=sock.name,id=sock.id})
        return res.success, res.data
      end,
      ping = function()
        local res = handle(sock.server,"api/ping",{name=sock.name,id=sock.id})
        return res.success
      end,
      send = function(to,message)
        if type(to) ~= "string" or type(message) ~= "string" then
          error("Expected string, string",2)
        end
        local res = handle(sock.server,"api/send",{name=sock.name,id=sock.id,to=to,message=toHex(message)})
        if res.success then
          res.data.message = fromHex(res.data.message)
        end
        return res.success, res.data
      end,
      broadcast = function(message)
        if type(message) ~= "string" then
          error("Expected string",2)
        end
        local res
        res = handle(sock.server,"api",{get="socket"})
        if not res.success then
          return res.success
        end
        local messages = {}
        local hexmessage = toHex(message);
        for i,v in pairs(res.data) do
          res = handle(sock.server,"api/send",{name=sock.name,id=sock.id,to=v.name,message=hexmessage})
          if not res.success then
            return false
          end
          res.data.message = fromHex(res.data.message)
          table.insert(messages,res.data)
        end
        return true, messages
      end,
      receive = function()
        local res = handle(sock.server,"api/receive",{name=sock.name,id=sock.id})
        if res.success then
          for i=1,#res.data,1 do
            res.data[i].message = fromHex(res.data[i].message)
          end
        end
        return res.success, res.data
      end,
      close = function()
        local res = handle(sock.server,"api/disconnect",{name=sock.name,id=sock.id})
        return res.success
      end,
    },
  })
  return sock
end

function time(server)
  if type(server) ~= "string" then
    error("Expected string",2)
  end
  local res = handle(server,"api",{get="time"})
  return res.success, res.data
end

function lookup(server,name)
  if type(server) ~= "string" then
    error("Expected string",2)
  elseif name and type(name) ~= "string" then
    error("Expected string, string",2)
  end
  local res = handle(server,"api",{get="socket",name=name})
  return res.success, res.data
end
